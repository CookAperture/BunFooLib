// <auto-generated />
using System;
using Foos.Api.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Foos.Api.Database.Migrations
{
    [DbContext(typeof(FoosDbContext))]
    partial class FoosDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Foos.Api.Database.Contracts.Entities.FooCategoryEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("FooCategories");
                });

            modelBuilder.Entity("Foos.Api.Database.Contracts.Entities.FooEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("RecommendedAmountPerDayID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("RecommendedAmountPerDayID");

                    b.ToTable("Foos");
                });

            modelBuilder.Entity("Foos.Api.Database.Contracts.Entities.MeasurementEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("Foos.Api.Database.Contracts.Entities.RecommendedAmountPerDayEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MeasurementID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("MeasurementID");

                    b.ToTable("RecommendedAmountPerDayEntries");
                });

            modelBuilder.Entity("Foos.Api.Database.Contracts.Entities.FooEntity", b =>
                {
                    b.HasOne("Foos.Api.Database.Contracts.Entities.FooCategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.HasOne("Foos.Api.Database.Contracts.Entities.RecommendedAmountPerDayEntity", "RecommendedAmountPerDay")
                        .WithMany()
                        .HasForeignKey("RecommendedAmountPerDayID");

                    b.Navigation("Category");

                    b.Navigation("RecommendedAmountPerDay");
                });

            modelBuilder.Entity("Foos.Api.Database.Contracts.Entities.RecommendedAmountPerDayEntity", b =>
                {
                    b.HasOne("Foos.Api.Database.Contracts.Entities.MeasurementEntity", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Measurement");
                });
#pragma warning restore 612, 618
        }
    }
}
